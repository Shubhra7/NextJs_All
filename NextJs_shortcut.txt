1. page.js is passed in Layout.js
2. Layout.js is main part to show

3. no need to do routing like React, just make files like pages/kalu.js then automatic routing will be done.

4. Keep all frontend routes in src/app/
   Keep all API routes in src/pages/api/



5. for project setup follow ==> 2ndsetupapp
***************
new version:
***************
a. for page routing==> app/about/page.js
b. for api routing==> app/api/hello/route.js 



6. for dynamic routing ==> 2ndsetupapp
   a. app/blogpost/[sno]/pages.js   ====> http://localhost:3000/blogpost/raju
	
import React from 'react'
const page = async({params}) => {
    const {sno} = params
  return (
    <div>
      <p>This profile is of: {sno}</p>
      {/* "sno" name is manditory for dynamic routing*/}
    </div>
  )
}

export default page


7. For file system  => api/getblog/route.js
import { promises as fs } from 'fs'; // âœ… correct import
import path from 'path';

export async function GET(request) {
    const { searchParams } = new URL(request.url);
    const slug = searchParams.get('slug');

    if(!slug){
        return new Response(JSON.stringify({ error: "Missing slug" }), {
        status: 400,
        headers: { "Content-Type": "application/json" },
        });
    }

    try {
        const filePath = path.join(process.cwd(),'src','blogdata',`${slug}.json`);
        const fileContents = await fs.readFile(filePath,'utf-8');
        const data = JSON.parse(fileContents);

        return new Response(JSON.stringify(data),{
            status:200,
            headers:{'Content-Type' : 'application/json'}
        });
        
    } catch (error) {
        return new Response(JSON.stringify({error: "File not found"}),{
            status:404,
            headers:{'Content-Type' : 'application/json'}
        })
    }
}






7. Title change metadata is good 
export const metadata = {
  title: "About Us",
  description: "Learn more about our team and mission.",
};


8.      <Script src="/sj.js" strategy="afterInteractive"></Script>

9. Image tag do=> lazyLoad


10. for css ==>
	a. app/about/About.module.css
	b. import styles from './About.module.css';




11. ðŸ§© What is styled-jsx?
styled-jsx is a CSS-in-JS styling solution built into Next.js by default.
It allows you to write scoped CSS directly inside your component files â€” without any extra setup.

'use client';
export default function About() {
  return (
    <div>
      <h1>Hello About Page</h1>
      <p>This is a styled paragraph.</p>

      <style jsx>{`
        h1 {
          color: teal;
        }
        p {
          font-size: 18px;
          color: #444;
        }
      `}</style>
    </div>
  );
}
ðŸ”’ Why use styled-jsx?

Styles are scoped only to the component

No naming conflicts

No need for .css files or module.css



******Can you use global styles?

Yes! Just add the global attribute:
<style jsx global>{`
  body {
    margin: 0;
    font-family: Arial;
  }
`}</style>


12. 'use client'; ==> when need to do client side rendering 

13.JSON.parse() ==> JSON/String to JS-Object
   JSON.stringify() ==> JS-Object to JSON


14. api/blogs ==> for all endpoint in one place
    api/getblog ==> dynamic slug for each resource fetch blog



15. Server-Side Rendering (SSR)
ðŸ”¹ What is it?
SSR means your page is generated on the server at the time of the request. Every time a user requests the page, the server runs the code, fetches the data, builds the HTML, and sends it back.

export async function getServerSideProps(context) {
  const res = await fetch(`https://api.example.com/data`);
  const data = await res.json();
  return { props: { data } };
}

Think of a restaurant that cooks food only when you order. You wait a bit longer, but it's fresh and specific to your request.





16. Static Site Generation (SSG)
ðŸ”¹ What is it?
SSG means the HTML is pre-generated at build time (i.e., during npm run build) and served instantly on request.

export async function getStaticProps() {
  const res = await fetch('https://api.example.com/data');
  const data = await res.json();
  return { props: { data } };
}

Like buying snacks from a vending machine â€” they were prepared earlier and are ready instantly.



17. For Frontend==>  const params = useParams();
    		     const slug =  params?.slug;

18. For Backend==> const { searchParams } = new URL(request.url);
    		   console.log(searchParams);
    		   const slug = searchParams.get('slug');



19. Correct way (for dynamic route segment /api/getblog/how-to-learn-js)
// app/api/getblog/[slug]/route.js

export async function GET(request, { params }) {
  const { slug } = params;
  console.log("Slug:", slug);
  return Response.json({ message: `Slug is ${slug}` });
}




## getServerSideProps, getStaticProps, and getInitialProps

blog-hunt
12. app/blog/page.js

In the latest Next.js App Router (using the app/ directory), traditional data fetching methods like getServerSideProps, getStaticProps, and getInitialProps are no longer supported. Instead, server-side rendering (SSR) and static generation are handled more flexibly through server components, which are the default unless 'use client' is specified. In your current setup, app/blog/page.js is a client component (due to 'use client'), so it fetches data on the browser after the page loads using axios, which doesn't benefit SEO or faster initial rendering. You also use a route handler (app/api/blogs/route.js) to serve blog data by reading local files â€” a good practice. To fully leverage SSR and improve performance and SEO, you should remove 'use client' and fetch blog data directly in the component using await fetch() with { cache: 'no-store' } for SSR or { next: { revalidate: 60 } } for ISR. This shift reflects Next.js's modern approach to server-first rendering with improved flexibility and performance.

ISR is like SSG with superpowers â€” it keeps your pages static and fast, but allows updates without a full rebuild.


### For SSR (Server Side Rendering)
const res = await fetch('http://localhost:3000/api/blogs',{
    cache: 'no-store', // <- disables caching for SSR
  })
  const blogs = await res.json();


### For ISR / SSG ####

// app/blog/page.js
export const revalidate = 60; // Enables ISR

export default async function BlogPage() {
  const res = await fetch('http://localhost:3000/api/blogs', {
    cache: 'force-cache', // optional: use this to allow static caching
  });
  const blogs = await res.json();

  return (
    // render blogs here
  );
}

	